/**
 * ファイル名：bracketCheck.js
 * 目的：
 * 与えられた文字列に含まれる括弧の整合性を確認する。
 *
 * 実装方針：
 * 1. 括弧の開き文字（'(', '{', '['）をスタックに追加する。
 * 2. 閉じ括弧が来たらスタックの最後の開き括弧と対応しているか確認する。
 *    - 対応していなければ false を返す。
 *    - スタックが空で閉じ括弧が来た場合も false。
 * 3. 最後にスタックが空であれば、すべて対応しているので true を返す。
 *
 * 工夫点：
 * - スタック構造を使ってネストした括弧にも対応できるようにした。
 * - 開き括弧と閉じ括弧のペアを1つずつ検証することで、効率よくチェックできる。
 */



const isValid = (s) => {
// ここにコードを書いてください
    //開き括弧を保持するスタック
    let stack = [];

    //文字を一文字ずつチェック
    for(let i = 0;i < s.length;i++){
        //開き括弧の場合はスタックに追加
        if(s[i] === "(" ||s[i] === "{" ||s[i] ==="["){
            stack.push(s[i]);
        }

        //閉じ括弧の場合の処理
        else if(s[i] ===")" || s[i] ==="}" || s[i] === "]"){
            //開き括弧がないのに閉じ括弧が来た場合
            if(stack.length === 0){
                return false;
            }

            //最後に追加された括弧を取り出す
            let box = stack.pop();

            //対応する括弧が合っていない場合はfalse
            if((s[i] === ")" && box !== "(") ||
               (s[i] === "}" && box !== "{") ||
               (s[i] === "]" && box !== "[")){
                    return false;
            }
        }
    }

    //スタックに残っている場合は閉じていない括弧があるためfalse
    if(stack.length !== 0){
        return false;
    }

    //最後まで問題なければtrue
    return true;
};
let s = '()';
console.log(isValid(s)); // true
s = '({)}'
console.log(isValid(s)); // false